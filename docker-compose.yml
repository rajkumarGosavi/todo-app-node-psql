# version: "3"
# services:
#   app:
#     restart: on-failure
#     build: .
#     depends_on:
#       - postgres
#     environment:
#       DATABASE_URL: postgres://user:pass@postgres:5432/db
#       NODE_ENV: development
#       PORT: 3000
#     ports:
#       - "3000:3000"
#     command: npm run start
#     volumes:
#       - .:/app/
#       - /app/node_modules

#   postgres:
#     image: postgres:11
#     ports:
#       - "15432:5432"
#     environment:
#       POSTGRES_USER: user
#       POSTGRES_PASSWORD: pass
#       POSTGRES_DB: db

version: '3'

services:
  nodejs:
    build:
      context: .
      dockerfile: Dockerfile
    image: nodejs
    container_name: nodejs
    restart: unless-stopped
    env_file: .env
    environment:
      - POSTGRES_USER=$PG_USERNAME
      - POSTGRES_PASSWORD=$PG_PASSWORD
      - POSTGRES_HOSTNAME=db
      - POSTGRES_PORT=$PG_PORT
      - POSTGRES_DB=$PG_DB
    depends_on:
      - postgres
    ports:
      - "8090:8080"
    volumes:
      - .:/home/node/app
      - node_modules:/home/node/app/node_modules
    networks:
      - app-network
    command: ./wait-for.sh db:5432 -- /home/node/app/node_modules/.bin/nodemon server.js

  postgres:
    image: postgres:latest
    container_name: db
    restart: unless-stopped
    env_file: .env
    environment:
      POSTGRES_USER: $PG_USERNAME
      POSTGRES_PASSWORD: $PG_PASSWORD
      POSTGRES_DB: $PG_DB
    volumes:
      - dbdata:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - /var/lib/postgresql
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  dbdata:
  node_modules:
